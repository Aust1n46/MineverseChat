package mineverse.Aust1n46.chat;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.regex.Pattern;
import org.bukkit.ChatColor;
import org.bukkit.configuration.ConfigurationSection;

public class ChatChannelInfo {
    MineverseChat plugin;
    List<String> filters;
    List<String> blockablecommands;
    ChatChannel[] cc;
    public Boolean saveplayerdata;
    public Boolean useSuffix;
    public Boolean chatPrefix;
    public String tellColor;
    public String defaultChannel;
    public String defaultColor;
    
    //Broadcast Variables
    public String broadcastColor; 
    public String broadcastDisplayTag;
    public String broadcastPermissions;

    @SuppressWarnings("unchecked")
    public ChatChannelInfo(MineverseChat _plugin) {
        plugin = _plugin;
        filters = (List<String>) plugin.getConfig().getList("filters");
        blockablecommands = (List<String>) plugin.getConfig().getList("blockablecommands");
        String _color = "";
        String _chatcolor = "";
        String _name = "";
        String _permission = ""; 
        Boolean _mutable = false;
        Boolean _filter = false;
        Boolean _defaultchannel = false;
        String _alias = "";
        Double _distance = (double) 0;
        Boolean _autojoin = false;
        Boolean _bungee=false;
        String _format="";
        int _cooldown = 0;
        tellColor = "gray";
        ConfigurationSection cs = plugin.getConfig().getConfigurationSection("channels");
        ConfigurationSection bs = plugin.getConfig().getConfigurationSection("broadcast");
        broadcastColor=bs.getString("color","white");
        broadcastPermissions=bs.getString("permissions","");
        broadcastDisplayTag=FormatStringAll(bs.getString("displaytag","[Broadcast]"));
        saveplayerdata = plugin.getConfig().getBoolean("saveplayerdata", true);     
        chatPrefix = false;     
        if(plugin.getConfig().getBoolean("chatPrefix", false)) {
        	chatPrefix = plugin.getConfig().getBoolean("chatPrefix", false);
        }      
        plugin.setLogLevel(plugin.getConfig().getString("loglevel", "INFO").toUpperCase());
        tellColor = plugin.getConfig().getString("tellcolor", "gray");
        int len = (cs.getKeys(false)).size();
        cc = new ChatChannel[len];
        int x = 0;
        for(String key : cs.getKeys(false)) {
            _color = (String) cs.getString(key + ".color", "white");      
            _chatcolor = (String) cs.getString(key + ".chatcolor", "white");
            if(!(isValidColor(_color))) {
                plugin.getServer().getLogger().info("[" + plugin.getName() + "] " + _color + " is not valid. Changing to white.");
                _color = "white";
            }        
            if(!(isValidColor(_chatcolor))) {
            	plugin.getServer().getLogger().info("[" + plugin.getName() + "] " + _chatcolor + " is not valid. Changing to white.");
            	_chatcolor = "white";
            }
            _name = key;
            _permission = (String) cs.getString(key + ".permissions", "None");                      
            _mutable = (Boolean) cs.getBoolean(key + ".mutable", false);         
            _filter = (Boolean) cs.getBoolean(key + ".filter", true);         
            _bungee = (Boolean) cs.getBoolean(key + ".bungeecord", false);
            _format = (String) cs.getString(key + ".format", "Default");
            _defaultchannel = (Boolean) cs.getBoolean(key + ".default", false);
            if(_defaultchannel == true) {
                defaultChannel = _name;
                defaultColor = _color;
            }
            _alias = (String) cs.getString(key + ".alias", "None");
            _distance = (Double) cs.getDouble(key + ".distance", (double) 0);
            _cooldown = (int) cs.getInt(key + ".cooldown", 0);
            _autojoin = (Boolean) cs.getBoolean(key + ".autojoin", false);
            ChatChannel c = new ChatChannel(_name, _color, _chatcolor, _permission, _mutable, _filter, _defaultchannel, _alias, _distance, _autojoin, _bungee, _cooldown, _format);
            cc[x++] = c;
        }
    }

    public List<String> getAutojoinList() {
        List<String> joinlist = new ArrayList<String>();
        for(ChatChannel c : cc) {
            if(c.getAutojoin()) {
                joinlist.add(c.getName());
            }
        }
        return joinlist;
    }

    int getChannelCount() {
        return cc.length;
    }

    void logChannelList() {
        for(ChatChannel p : cc) {
            plugin.getServer().getLogger().info("[" + plugin.getName() + "]" + p.getName() + ":" + p.getChatColor() + ":" + p.getPermission() + ":" + p.isMutable() + ":" + p.isFiltered() + ":" + p.isDefaultchannel());
        }
    }

    public Boolean isValidColor(String _color) {
        Boolean bFound = false;
        for(ChatColor bkColors : ChatColor.values()) {
            if(_color.equalsIgnoreCase(bkColors.name())) {
                bFound = true;
            }
        }
        return bFound;
    }

    public ChatChannel[] getChannelsInfo() {
        return cc;
    }

    public ChatChannel getChannelInfo(String ChannelName) {
        for(ChatChannel c : cc) {
            if(c.getName().equalsIgnoreCase(ChannelName) || c.getAlias().equalsIgnoreCase(ChannelName)) {
                return c;
            }
        }
        return null;
    }

    public String FilterChat(String msg) {
        int t = 0;
        for(String s : filters) {
            t = 0;
            String[] pparse = new String[2];
            pparse[0] = " ";
            pparse[1] = " ";
            StringTokenizer st = new StringTokenizer(s, ",");
            while(st.hasMoreTokens()) {
                if(t < 2) {
                    pparse[t++] = st.nextToken();
                }
            }
            msg = msg.replaceAll("(?i)" + pparse[0], pparse[1]);          	
        }
        return msg;
    }
    
    protected static Pattern chatColorPattern = Pattern.compile("(?i)&([0-9A-F])");
    protected static Pattern chatMagicPattern = Pattern.compile("(?i)&([K])");
    protected static Pattern chatBoldPattern = Pattern.compile("(?i)&([L])");
    protected static Pattern chatStrikethroughPattern = Pattern.compile("(?i)&([M])");
    protected static Pattern chatUnderlinePattern = Pattern.compile("(?i)&([N])");
    protected static Pattern chatItalicPattern = Pattern.compile("(?i)&([O])");
    protected static Pattern chatResetPattern = Pattern.compile("(?i)&([R])");

    public String FormatStringColor(String tobeformatted) {
        String allFormated = tobeformatted;
        allFormated = chatColorPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = allFormated.replaceAll("%", "\\%");
        return allFormated;
    }
    
    public String FormatString(String tobeformatted) {
        String allFormated = tobeformatted;      
        allFormated = chatMagicPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatBoldPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatStrikethroughPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatUnderlinePattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatItalicPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatResetPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = allFormated.replaceAll("%", "\\%");
        return allFormated;
    }

    public String FormatPlayerName(String playerPrefix, String playerDisplayName, String playerSuffix) {      
    	playerPrefix = chatColorPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatMagicPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatBoldPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatStrikethroughPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatUnderlinePattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatItalicPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        playerPrefix = chatResetPattern.matcher(playerPrefix).replaceAll("\u00A7$1");
        
        playerSuffix = chatColorPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatMagicPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatBoldPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatStrikethroughPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatUnderlinePattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatItalicPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        playerSuffix = chatResetPattern.matcher(playerSuffix).replaceAll("\u00A7$1");
        return playerPrefix + playerDisplayName.trim() + playerSuffix;
    }
    
    public String FormatStringAll(String tobeformatted) {
    	String allFormated = tobeformatted;      
    	allFormated = chatColorPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatMagicPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatBoldPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatStrikethroughPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatUnderlinePattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatItalicPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = chatResetPattern.matcher(allFormated).replaceAll("\u00A7$1");
        allFormated = allFormated.replaceAll("%", "\\%");
        return allFormated;
    }

    List<String> getFilters() {
        return filters;
    }
}
