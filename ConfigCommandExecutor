package mineverse.Aust1n46.chat.command;

import java.util.List;
import java.util.logging.Logger;
import mineverse.Aust1n46.chat.ChatChannelInfo;
import mineverse.Aust1n46.chat.MineverseChat;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

public class ConfigCommandExecutor implements CommandExecutor {
	private MineverseChat plugin;
	ChatChannelInfo cc;
	private static final Logger log = Logger.getLogger("Minecraft");
	
	public ConfigCommandExecutor(MineverseChat _plugin, ChatChannelInfo _cc) {
		plugin = _plugin;
		cc = _cc;
	}
	
	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {	
		String comm = cmd.getName().toLowerCase();
		if(!(sender instanceof Player)) {
    		log.info(String.format("[" + String.format(plugin.getConfig().getString("pluginname", "MineverseChat") + "]" + " - This command must be run by a player!", plugin.getDescription().getName())));
    		return true;
    	}
        Player player = (Player) sender;       
        
        if(args == null) {
            return false;
        }
        
        switch (comm) {
        	case "edit": {
        		if(player.hasPermission("mineversechat.edit")) {
        			try {
        				switch(args[0]) {
        					case "filters": {
        						try {
        							switch(args[1]) {
        								case "page": {
        									try {
        										if(Integer.parseInt(args[2]) > 0) {     
        											plugin.reloadConfig();
        											List<String> filters = plugin.getConfig().getStringList("filters");
        											player.sendMessage(ChatColor.RED + "List of filters page: " + args[2]);
        											for(int a = 0 + (Integer.parseInt(args[2])-1)*97;a <= Integer.parseInt(args[2])*97;a ++) {
        												if(a >= filters.size()) {
        													break;
        												}
        												player.sendMessage(ChatColor.GREEN + "" + filters.get(a));
        											}
        											if(filters.size() >= Integer.parseInt(args[2])*97) {
        												int nextpage = Integer.parseInt(args[2]) + 1;
        												player.sendMessage(ChatColor.RED + "/edit filters page " + nextpage);
        											}
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Invalid arguments, /edit filters page [number]");
        										break;
        									}
        									catch(Exception e) {
        										player.sendMessage(ChatColor.RED + "Invalid arguments, /edit filters page [number]");
        									}
        									break;
        								}
        								case "add": {
        									List<String> filters = plugin.getConfig().getStringList("filters");
        									if(args[2].contains(",")) {
        										filters.add(args[2]);
        										plugin.getConfig().set("filters", filters);
        										player.sendMessage(ChatColor.GREEN + "Added filter " + args[2]);
        										plugin.saveConfig();
        										plugin.reloadConfig();	
        										Bukkit.getPluginManager().disablePlugin(plugin);
        					            		Bukkit.getPluginManager().enablePlugin(plugin);
        										break;
        									}
        									player.sendMessage(ChatColor.RED + "Invalid arguments, regex1,regex2");
        									break;
        								}
        								case "remove": {
        									List<String> filters = plugin.getConfig().getStringList("filters");
        									if(args[2].contains(",")) {
        										filters.remove(args[2]);
        										plugin.getConfig().set("filters", filters);
        										player.sendMessage(ChatColor.GREEN + "Removed filter " + args[2]);			
        										plugin.saveConfig();
        										plugin.reloadConfig();
        										Bukkit.getPluginManager().disablePlugin(plugin);
        					            		Bukkit.getPluginManager().enablePlugin(plugin);
        										break;
        									}
        									player.sendMessage(ChatColor.RED + "Invalid arguments, regex1,regex2");
        									break;
        								}
        								default: {
        									player.sendMessage(ChatColor.RED + "Invalid arguments, /edit filters [page [number], add, remove]");
        									break;
        								}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit filters [page [number], add, remove]");
        						}        					
        						break;
        					}
        					case "blockablecommands": {
        						try {
        							switch(args[1]) {
        								case "page": {
        									try {
        										if(Integer.parseInt(args[2]) > 0) {     
        											plugin.reloadConfig();
        											List<String> blockablecommands = plugin.getConfig().getStringList("blockablecommands");
        											player.sendMessage(ChatColor.RED + "List of blockablecommands page: " + args[2]);
        											for(int a = 0 + (Integer.parseInt(args[2])-1)*97;a <= Integer.parseInt(args[2])*97;a ++) {
        												if(a >= blockablecommands.size()) {
        													break;
        												}
        												player.sendMessage(ChatColor.GREEN + "" + blockablecommands.get(a));
        											}
        											if(blockablecommands.size() >= Integer.parseInt(args[2])*97) {
        												int nextpage = Integer.parseInt(args[2]) + 1;
        												player.sendMessage(ChatColor.RED + "/edit blockablecommands page " + nextpage);
        											}
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Invalid arguments, /edit blockablecommands page [number]");
        										break;
        									}
        									catch(Exception e) {
        										player.sendMessage(ChatColor.RED + "Invalid arguments, /edit blockablecommands page [number]");
        									}
        									break;
        								}
        								case "add": {
        									List<String> blockablecommands = plugin.getConfig().getStringList("blockablecommands");     									
        									blockablecommands.add(args[2]);
        									plugin.getConfig().set("blockablecommands", blockablecommands);
        									player.sendMessage(ChatColor.GREEN + "Added blockablecommand " + args[2]);
        									plugin.saveConfig();
        									plugin.reloadConfig();
        									break;      									
        								}
        								case "remove": {
        									List<String> blockablecommands = plugin.getConfig().getStringList("blockablecommands");
        									blockablecommands.remove(args[2]);
        									plugin.getConfig().set("blockablecommands", blockablecommands);
        									player.sendMessage(ChatColor.GREEN + "Removed blockablecommand " + args[2]);
        									plugin.saveConfig();
        									plugin.reloadConfig();
        									break;       	
        								}
        								default: {
        									player.sendMessage(ChatColor.RED + "Invalid arguments, /edit blockablecommands [page [number], add, remove]");
        									break;
        								}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit blockablecommands [page [number], add, remove]");
        						}        					
        						break;
        					}
        					case "commandspy": {
        						try {
        							switch(args[1]) {
        								case "worldeditcommands": {
        									try {
        										switch(args[2]) {
        											case "true": {
        												plugin.getConfig().getConfigurationSection("commandspy").set("worldeditcommands", true);
        												player.sendMessage(ChatColor.GREEN + "worldeditcommands: has been set to true");
        												plugin.saveConfig();
        												plugin.reloadConfig();
        												break;
        											}
        											case "false": {
        												plugin.getConfig().getConfigurationSection("commandspy").set("worldeditcommands", false);
        												player.sendMessage(ChatColor.GREEN + "worldeditcommands: has been set to false");
        												plugin.saveConfig();
        												plugin.reloadConfig();
        												break;
        											}
        											default: {
        												player.sendMessage(ChatColor.RED + "Invalid arguments, /edit commandspy worldeditcommands [true/false]");
        												break;
        											}
        										}
        									}
        									catch(Exception e) {
        										player.sendMessage(ChatColor.GREEN + "worldeditcommands: " + plugin.getConfig().getConfigurationSection("commandspy").getBoolean("worldeditcommands"));
        									}
        									break;
        								}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit commandspy worldeditcommands");
        						} 
        						break;
        					}
        					case "antispam": {
        						try {
        							switch(args[1]) {
        								case "enabled": {
        									try {
        										switch(args[2]) {
        											case "true": {
        												plugin.getConfig().getConfigurationSection("antispam").set("enabled", true);
        												player.sendMessage(ChatColor.GREEN + "enabled: has been set to true");
        												plugin.saveConfig();
        												plugin.reloadConfig();
        												break;
        											}
        											case "false": {
        												plugin.getConfig().getConfigurationSection("antispam").set("enabled", false);
        												player.sendMessage(ChatColor.GREEN + "enabled: has been set to false");
        												plugin.saveConfig();
        												plugin.reloadConfig();
        												break;
        											}
        											default: {
        												player.sendMessage(ChatColor.RED + "Invalid arguments, /edit antispam enabled [true/false]");
        												break;
        											}
        										}
        									}
        									catch(Exception e) {
        										player.sendMessage(ChatColor.GREEN + "enabled: " + plugin.getConfig().getConfigurationSection("antispam").getBoolean("enabled"));
        									}
        									break;
        								}
        								case "spamnumber": {
        									try {
        										if(Integer.parseInt(args[2]) > 0) {
        											plugin.getConfig().getConfigurationSection("antispam").set("spamnumber", Integer.parseInt(args[2]));
        											player.sendMessage(ChatColor.GREEN + "spamnumber: has been set to " + args[2]);						
        											plugin.saveConfig();
        											plugin.reloadConfig();
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Invalid spamnumber, /edit antispam spamnumber [Integer > 0]");
        										break;
        									}
        									catch(NumberFormatException e) {
        										player.sendMessage(ChatColor.RED + "Invalid spamnumber, /edit antispam [Integer > 0]");
        										break;
        	        						} 
        	        						catch(Exception e) {
        	        							player.sendMessage(ChatColor.GREEN + "spamnumber: " + plugin.getConfig().getConfigurationSection("antispam").getInt("spamnumber"));
        										break;
        	        						}
        								}
        								case "spamtime": {
        									try {
        										if(Integer.parseInt(args[2]) > 0) {
        											plugin.getConfig().getConfigurationSection("antispam").set("spamtime", Integer.parseInt(args[2]));
        											player.sendMessage(ChatColor.GREEN + "spamtime: has been set to " + args[2]);						
        											plugin.saveConfig();
        											plugin.reloadConfig();
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Invalid spamtime, /edit antispam spamtime [Integer > 0]");
        										break;
        									}
        									catch(NumberFormatException e) {
        										player.sendMessage(ChatColor.RED + "Invalid spamtime, /edit antispam spamtime [Integer > 0]");
        										break;
        	        						} 
        	        						catch(Exception e) {
        	        							player.sendMessage(ChatColor.GREEN + "spamtime: " + plugin.getConfig().getConfigurationSection("antispam").getInt("spamtime"));
        										break;
        	        						}
        								}
        								default: {
        									player.sendMessage(ChatColor.RED + "Invalid arguments, /edit antispam [enabled, spamnumber, spamtime]");
        									break;
        								}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "enabled: " + plugin.getConfig().getConfigurationSection("antispam").getString("enabled"));
        							player.sendMessage(ChatColor.GREEN + "spamnumber: " + plugin.getConfig().getConfigurationSection("antispam").getString("spamnumber"));
        							player.sendMessage(ChatColor.GREEN + "spamtime: " + plugin.getConfig().getConfigurationSection("antispam").getString("spamtime"));
        						}        					
        						break;
        					}
        					case "pluginname": {
        						try {									
									plugin.getConfig().set("pluginname", args[1]);
									player.sendMessage(ChatColor.GREEN + "pluginname: has been set to " + args[1]);
									plugin.saveConfig();
									plugin.reloadConfig();
									break;									
								}
								catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "pluginname: " + plugin.getConfig().getString("pluginname"));
									break;
        						} 
        					}
        					case "loglevel": {
        						try {
        							switch(args[1]) {
										case "info": {
											plugin.getConfig().set("loglevel", "info");
											player.sendMessage(ChatColor.GREEN + "loglevel: has been set to info");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "debug": {
											plugin.getConfig().set("loglevel", "debug");
											player.sendMessage(ChatColor.GREEN + "loglevel: has been set to debug");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "warning": {
											plugin.getConfig().set("loglevel", "warning");
											player.sendMessage(ChatColor.GREEN + "loglevel: has been set to warning");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "error": {
											plugin.getConfig().set("loglevel", "error");
											player.sendMessage(ChatColor.GREEN + "loglevel: has been set to error");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										default: {
											player.sendMessage(ChatColor.RED + "Invalid arguments, /edit loglevel [info, debug, warning, error]");
											break;
										}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "loglevel: " + plugin.getConfig().getString("loglevel"));
        						}
        						break;
        					}
        					case "saveplayerdata": {
        						try {
        							switch(args[1]) {
										case "true": {
											plugin.getConfig().set("saveplayerdata", true);
											player.sendMessage(ChatColor.GREEN + "saveplayerdata: has been set to true");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "false": {
											plugin.getConfig().set("saveplayerdata", false);
											player.sendMessage(ChatColor.GREEN + "saveplayerdata: has been set to false");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										default: {
											player.sendMessage(ChatColor.RED + "Invalid arguments, /edit saveplayerdata [true/false]");
											break;
										}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "saveplayerdata: " + plugin.getConfig().getBoolean("saveplayerdata"));
        						}
        						break;
        					}
        					case "saveinterval": {
        						try {
									if(Integer.parseInt(args[1]) >= 0) {
										plugin.getConfig().set("saveinterval", Integer.parseInt(args[1]));
										player.sendMessage(ChatColor.GREEN + "saveinterval: has been set to " + args[1]);						
										plugin.saveConfig();
										plugin.reloadConfig();
										break;
									}
									player.sendMessage(ChatColor.RED + "Invalid saveinterval, /edit saveinterval [saveinterval]");
									break;
								}
								catch(NumberFormatException e) {
									player.sendMessage(ChatColor.RED + "Invalid saveinterval, /edit saveinterval [saveinterval]");
									break;
        						} 
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "saveinterval: " + plugin.getConfig().getInt("saveinterval"));
									break;
        						}
        					}       		        					
        					case "tellcolor": {
        						try {
									if(cc.isValidColor(args[1])) {
										plugin.getConfig().set("tellcolor", args[1].toLowerCase());
										player.sendMessage(ChatColor.GREEN + "tellcolor: has been set to " + args[1].toLowerCase());
										plugin.saveConfig();
										plugin.reloadConfig();
										Bukkit.getPluginManager().disablePlugin(plugin);
					            		Bukkit.getPluginManager().enablePlugin(plugin);
										break;
									}
									player.sendMessage(ChatColor.RED + "Invalid color, /edit tellcolor [color]");
									break;
								}
								catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "tellcolor: " + plugin.getConfig().getString("tellcolor"));
									break;
        						} 
        					}   
        					case "tellformatto": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("tellformatto", format);
									player.sendMessage(ChatColor.GREEN + "tellformatto: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "tellformatto: " + plugin.getConfig().getString("tellformatto"));
									break;
        						} 
        					}
        					case "tellformatfrom": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("tellformatfrom", format);
									player.sendMessage(ChatColor.GREEN + "tellformatfrom: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "tellformatfrom: " + plugin.getConfig().getString("tellformatfrom"));
									break;
        						} 
        					}
        					case "tellformatspy": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("tellformatspy", format);
									player.sendMessage(ChatColor.GREEN + "tellformatspy: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "tellformatspy: " + plugin.getConfig().getString("tellformatspy"));
									break;
        						} 
        					}
        					case "replyformatto": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("replyformatto", format);
									player.sendMessage(ChatColor.GREEN + "replyformatto: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "replyformatto: " + plugin.getConfig().getString("replyformatto"));
									break;
        						} 
        					}
        					case "replyformatfrom": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("replyformatfrom", format);
									player.sendMessage(ChatColor.GREEN + "replyformatfrom: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "replyformatfrom: " + plugin.getConfig().getString("replyformatfrom"));
									break;
        						} 
        					}
        					case "replyformatspy": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("replyformatspy", format);
									player.sendMessage(ChatColor.GREEN + "replyformatspy: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "replyformatspy: " + plugin.getConfig().getString("replyformatspy"));
									break;
        						} 
        					}
        					case "partyformat": {
        						try {
									String format = args[1] + " ";
									for(int x = 2; x < args.length; x++) {
										if(args[x].length() > 0) format += args[x] + " ";
					                }
									format = format.substring(0, format.length() - 1);
									plugin.getConfig().set("partyformat", format);
									player.sendMessage(ChatColor.GREEN + "partyformat: has been set to " + format);					
									plugin.saveConfig();
									plugin.reloadConfig();
									Bukkit.getPluginManager().disablePlugin(plugin);
				            		Bukkit.getPluginManager().enablePlugin(plugin);
									break;
								}
								catch(Exception e) {
									player.sendMessage(ChatColor.GREEN + "partyformat: " + plugin.getConfig().getString("partyformat"));
									break;
        						} 
        					}
        					case "broadcastafk": {
        						try {
        							switch(args[1]) {
										case "true": {
											plugin.getConfig().set("broadcastafk", true);
											player.sendMessage(ChatColor.GREEN + "broadcastafk: has been set to true");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "false": {
											plugin.getConfig().set("broadcastafk", false);
											player.sendMessage(ChatColor.GREEN + "broadcastafk: has been set to false");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										default: {
											player.sendMessage(ChatColor.RED + "Invalid arguments, /edit broadcastafk [true/false]");
											break;
										}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "broadcastafk: " + plugin.getConfig().getBoolean("broadcastafk"));
        						}
        						break;
        					}
        					case "formatcleaner": {
        						try {
        							switch(args[1]) {
										case "true": {
											plugin.getConfig().set("formatcleaner", true);
											player.sendMessage(ChatColor.GREEN + "formatcleaner: has been set to true");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										case "false": {
											plugin.getConfig().set("formatcleaner", false);
											player.sendMessage(ChatColor.GREEN + "formatcleaner: has been set to false");
											plugin.saveConfig();
											plugin.reloadConfig();
											break;
										}
										default: {
											player.sendMessage(ChatColor.RED + "Invalid arguments, /edit formatcleaner [true/false]");
											break;
										}
        							}					
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "formatcleaner: " + plugin.getConfig().getBoolean("formatcleaner"));
        						}
        						break;
        					}
        					case "broadcast": {
        						try {
        							switch(args[1]) {
        								case "color": {
        									try {
        										if(cc.isValidColor(args[2])) {
        											plugin.getConfig().getConfigurationSection("broadcast").set("color", args[2].toLowerCase());
        											player.sendMessage(ChatColor.GREEN + "color: has been set to " + args[2].toLowerCase());
        											plugin.saveConfig();
        											plugin.reloadConfig();
        											Bukkit.getPluginManager().disablePlugin(plugin);
        						            		Bukkit.getPluginManager().enablePlugin(plugin);
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Invalid color, /edit broadcast color [color]");
        										break;
        									}
        									catch(Exception e) {
        	        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit broadcast color [color]");
        										break;
        	        						} 
        								}
        								case "permissions": {
        									try {
        										plugin.getConfig().getConfigurationSection("broadcast").set("permissions", args[2]);
    											player.sendMessage(ChatColor.GREEN + "permissions: has been set to " + args[2]);
    											plugin.saveConfig();
    											plugin.reloadConfig();
    											Bukkit.getPluginManager().disablePlugin(plugin);
    						            		Bukkit.getPluginManager().enablePlugin(plugin);
    											break;
        									}
        									catch(Exception e) {
        	        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit broadcast permissions [permission]");
        										break;
        	        						} 
        								}
        								case "displaytag": {
        									try {
        										plugin.getConfig().getConfigurationSection("broadcast").set("displaytag", args[2]);
    											player.sendMessage(ChatColor.GREEN + "displaytag: has been set to " + args[2]);
    											plugin.saveConfig();
    											plugin.reloadConfig();
    											Bukkit.getPluginManager().disablePlugin(plugin);
    						            		Bukkit.getPluginManager().enablePlugin(plugin);
    											break;
        									}
        									catch(Exception e) {
        	        							player.sendMessage(ChatColor.RED + "Invalid arguments, /edit broadcast displaytag [displaytag]");
        										break;
        	        						} 
        								}
        								default: {
        									player.sendMessage(ChatColor.RED + "Invalid arguments, /edit broadcast [color, permissions, displaytag]");
        									break;
        								}
        							}
        						}
        						catch(Exception e) {
        							player.sendMessage(ChatColor.GREEN + "color: " + plugin.getConfig().getConfigurationSection("broadcast").getString("color"));
        							player.sendMessage(ChatColor.GREEN + "permissions: " + plugin.getConfig().getConfigurationSection("broadcast").getString("permissions"));
        							player.sendMessage(ChatColor.GREEN + "displaytag: " + plugin.getConfig().getConfigurationSection("broadcast").getString("displaytag"));
        						}        					
        						break;
        					}				
        					case "channels": {
        						try {
        							if(plugin.getConfig().getConfigurationSection("channels").getString(args[1]) != null) {
        								try {
        									switch(args[2]) {
        										case "color": {
        											try {
                										if(cc.isValidColor(args[3])) {
                											plugin.getConfig().getConfigurationSection("channels."+args[1]).set("color", args[3].toLowerCase());
                											player.sendMessage(ChatColor.GREEN + "color: has been set to " + args[3].toLowerCase());	
                											plugin.saveConfig();
                											plugin.reloadConfig();
                											Bukkit.getPluginManager().disablePlugin(plugin);
                						            		Bukkit.getPluginManager().enablePlugin(plugin);
                											break;
                										}
                										player.sendMessage(ChatColor.RED + "Invalid color, /edit channels [channel] color [color]");
                										break;
                									}
                									catch(Exception e) {
                										player.sendMessage(ChatColor.GREEN + "color: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getString("color"));
                										break;
                	        						} 
        										}
        										case "chatcolor": {
        											try {
                										if(cc.isValidColor(args[3])) {
                											plugin.getConfig().getConfigurationSection("channels."+args[1]).set("chatcolor", args[3].toLowerCase());
                											player.sendMessage(ChatColor.GREEN + "chatcolor: has been set to " + args[3].toLowerCase());	
                											plugin.saveConfig();
                											plugin.reloadConfig();
                											Bukkit.getPluginManager().disablePlugin(plugin);
                						            		Bukkit.getPluginManager().enablePlugin(plugin);
                											break;
                										}
                										player.sendMessage(ChatColor.RED + "Invalid color, /edit channels [channel] chatcolor [color]");
                										break;
                									}
                									catch(Exception e) {
                										player.sendMessage(ChatColor.GREEN + "chatcolor: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getString("chatcolor"));
                										break;
                	        						} 
        										}
        										case "mutable": {
        											try {
        												switch(args[3]) {
        													case "true": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("mutable", true);
        														player.sendMessage(ChatColor.GREEN + "mutable: has been set to true");	
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													case "false": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("mutable", false);
        														player.sendMessage(ChatColor.GREEN + "mutable: has been set to false");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													default: {
        														player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel] mutable [true/false]");
        														break;
        													}
        												}
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "mutable: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getBoolean("mutable"));
                	        						} 
        											break;
        										}
        										case "filter": {
        											try {
        												switch(args[3]) {
        													case "true": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("filter", true);
        														player.sendMessage(ChatColor.GREEN + "filter: has been set to true");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													case "false": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("filter", false);
        														player.sendMessage(ChatColor.GREEN + "filter: has been set to false");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													default: {
        														player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel] filter [true/false]");
        														break;
        													}
        												}
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "filter: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getBoolean("filter"));
                	        						} 
        											break;
        										}
        										case "permissions": {
        											try {
        												plugin.getConfig().getConfigurationSection("channels."+args[1]).set("permissions", args[3]);
        												player.sendMessage(ChatColor.GREEN + "permissions: has been set to " + args[3]);
														plugin.saveConfig();
														plugin.reloadConfig();
														Bukkit.getPluginManager().disablePlugin(plugin);
									            		Bukkit.getPluginManager().enablePlugin(plugin);
														break;
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "permissions: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getString("permissions"));
                										break;
                	        						} 
        										}
        										case "alias": {
        											try {
        												plugin.getConfig().getConfigurationSection("channels."+args[1]).set("alias", args[3]);
        												player.sendMessage(ChatColor.GREEN + "alias: has been set to " + args[3]);					
														plugin.saveConfig();
														plugin.reloadConfig();
														Bukkit.getPluginManager().disablePlugin(plugin);
									            		Bukkit.getPluginManager().enablePlugin(plugin);
														break;
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "alias: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getString("alias"));
                										break;
                	        						} 
        										}
        										case "default": {
        											try {
        												switch(args[3]) {
        													case "true": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("default", true);
        														player.sendMessage(ChatColor.GREEN + "default: has been set to true");	
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													case "false": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("default", false);
        														player.sendMessage(ChatColor.GREEN + "default: has been set to false");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													default: {
        														player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel] default [true/false]");
        														break;
        													}
        												}
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "default: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getBoolean("default"));
                	        						} 
        											break;
        										}
        										case "autojoin": {
        											try {
        												switch(args[3]) {
        													case "true": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("autojoin", true);
        														player.sendMessage(ChatColor.GREEN + "autojoin: has been set to true");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													case "false": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("autojoin", false);
        														player.sendMessage(ChatColor.GREEN + "autojoin: has been set to false");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													default: {
        														player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel] autojoin [true/false]");
        														break;
        													}
        												}
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "autojoin: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getBoolean("autojoin"));
                	        						} 
        											break;
        										}
        										case "distance": {
        											try {
        												if(Double.parseDouble(args[3]) >= (double) 0) {
        													plugin.getConfig().getConfigurationSection("channels."+args[1]).set("distance", Double.parseDouble(args[3]));
        													player.sendMessage(ChatColor.GREEN + "distance: has been set to " + args[3]);
        													plugin.saveConfig();
        													plugin.reloadConfig();
        													Bukkit.getPluginManager().disablePlugin(plugin);
        								            		Bukkit.getPluginManager().enablePlugin(plugin);
        													break;
        												}
        												player.sendMessage(ChatColor.RED + "Invalid distance, /edit channels [channel] distance [distance]");
                										break;
        											}
        											catch(NumberFormatException e) {
        												player.sendMessage(ChatColor.RED + "Invalid distance, /edit channels [channel] distance [distance]");
                										break;
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "distance: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getDouble("distance"));
                										break;
                	        						} 
        										}
        										case "cooldown": {
        											try {
        												if(Integer.parseInt(args[3]) >= 0) {
        													plugin.getConfig().getConfigurationSection("channels."+args[1]).set("cooldown", Integer.parseInt(args[3]));
        													player.sendMessage(ChatColor.GREEN + "cooldown: has been set to " + args[3]);
        													plugin.saveConfig();
        													plugin.reloadConfig();
        													Bukkit.getPluginManager().disablePlugin(plugin);
        								            		Bukkit.getPluginManager().enablePlugin(plugin);
        													break;
        												}
        												player.sendMessage(ChatColor.RED + "Invalid cooldown, /edit channels [channel] cooldown [cooldown]");
                										break;
        											}
        											catch(NumberFormatException e) {
        												player.sendMessage(ChatColor.RED + "Invalid cooldown, /edit channels [channel] cooldown [cooldown]");
                										break;
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "cooldown: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getInt("cooldown"));
                										break;
                	        						} 
        										}
        										case "bungeecord": {
        											try {
        												switch(args[3]) {
        													case "true": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("bungeecord", true);
        														player.sendMessage(ChatColor.GREEN + "bungeecord: has been set to true");		
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													case "false": {
        														plugin.getConfig().getConfigurationSection("channels."+args[1]).set("bungeecord", false);
        														player.sendMessage(ChatColor.GREEN + "bungeecord: has been set to false");
        														plugin.saveConfig();
        														plugin.reloadConfig();
        														Bukkit.getPluginManager().disablePlugin(plugin);
        									            		Bukkit.getPluginManager().enablePlugin(plugin);
        														break;
        													}
        													default: {
        														player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel] bungeecord [true/false]");
        														break;
        													}
        												}
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "bungeecord: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getBoolean("bungeecord"));
                	        						} 
        											break;
        										}
        										case "format": {
        											try {
        												String format = args[3] + " ";
        												for(int x = 4; x < args.length; x++) {
        													if(args[x].length() > 0) format += args[x] + " ";
        								                }
        												format = format.substring(0, format.length() - 1);
        												plugin.getConfig().getConfigurationSection("channels."+args[1]).set("format", format);
        												player.sendMessage(ChatColor.GREEN + "format: has been set to " + format);					
														plugin.saveConfig();
														plugin.reloadConfig();
														Bukkit.getPluginManager().disablePlugin(plugin);
									            		Bukkit.getPluginManager().enablePlugin(plugin);
														break;
        											}
        											catch(Exception e) {
        												player.sendMessage(ChatColor.GREEN + "format: " + plugin.getConfig().getConfigurationSection("channels."+args[1]).getString("format"));
                										break;
                	        						} 
        										}
        										default: {
        											player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels " + args[1] + " [color, chatcolor, mutable, alias, default, autojoin, distance, cooldown, bungeecord, format]");
            										break;
        										}
        									}
        								}
        								catch(Exception e) {
                	        				player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels " + args[1] + " [color, chatcolor, mutable, alias, default, autojoin, distance, cooldown, bungeecord, format]");
                	        			}
        								break;
        							}
        							switch(args[1]) {
        								case "create": {
        									try {
        										System.out.println(plugin.getConfig().getConfigurationSection("channels").getString(args[2]));
        										if(!plugin.getConfig().getConfigurationSection("channels").isSet(args[2])) {
        											player.sendMessage(ChatColor.GREEN + "Created channel " + args[2] + " and assigned it default configuration.");
        											plugin.getConfig().createSection("channels."+args[2]);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("color", "white");
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("chatcolor", "white");
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("mutable", true);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("permissions", "None");
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("alias", args[2].toLowerCase().charAt(0));
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("default", false);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("autojoin", true);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("distance", 0.0);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("cooldown", 0);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("bungeecord", false);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("servername", false);
        											plugin.getConfig().getConfigurationSection("channels."+args[2]).set("format", "Default");
        											plugin.saveConfig();
        											plugin.reloadConfig();
        											Bukkit.getPluginManager().disablePlugin(plugin);
        						            		Bukkit.getPluginManager().enablePlugin(plugin);
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Channel " + args[2] + " already exists.");
        									}
        									catch(Exception e) {
                    	        				player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels create [channelname]");
                    	        			}
        									break;
        								}
        								case "delete": {
        									try {
        										if(plugin.getConfig().getConfigurationSection("channels").isSet(args[2])) {
        											player.sendMessage(ChatColor.GREEN + "Deleted channel " + args[2]);
        											plugin.getConfig().getConfigurationSection("channels").set(args[2], null);
        											plugin.saveConfig();
        											plugin.reloadConfig();
        											Bukkit.getPluginManager().disablePlugin(plugin);
        						            		Bukkit.getPluginManager().enablePlugin(plugin);
        											break;
        										}
        										player.sendMessage(ChatColor.RED + "Channel " + args[2] + " doesn't exist.");
        									}
        									catch(Exception e) {
                    	        				player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels delete [channelname]");
                    	        			}
        									break;
        								}
        								default: {
        									player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel, create, delete]");
    										break;
        								}
        							}
        						}
        						catch(Exception e) {
        	        				player.sendMessage(ChatColor.RED + "Invalid arguments, /edit channels [channel, create, delete]");
        	        			}
        						break;
        					}
        					case "help": {
        						player.sendMessage(ChatColor.GREEN + "/edit filters [page [number], add, remove]");
        						player.sendMessage(ChatColor.GREEN + "/edit blockablecommands [page [number], add, remove]");
        						player.sendMessage(ChatColor.GREEN + "/edit commandspy worldeditcommands [true/false]");
        						player.sendMessage(ChatColor.GREEN + "/edit antispam [enabled, spamnumber, spamtime]");
        						player.sendMessage(ChatColor.GREEN + "/edit pluginname [pluginname]");
        						player.sendMessage(ChatColor.GREEN + "/edit loglevel [info, debug, warning, error]");
        						player.sendMessage(ChatColor.GREEN + "/edit saveplayerdata [true/false]");
        						player.sendMessage(ChatColor.GREEN + "/edit saveinterval [saveinterval]");
        						player.sendMessage(ChatColor.GREEN + "/edit tellcolor [color]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit tellformatto [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit tellformatfrom [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit tellformatspy [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit replyformatto [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit replyformatfrom [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit replyformatspy [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit partyformat [format]"); 
        						player.sendMessage(ChatColor.GREEN + "/edit broadcastafk [true/false]");
        						player.sendMessage(ChatColor.GREEN + "/edit formatcleaner [true/false]");
        						player.sendMessage(ChatColor.GREEN + "/edit broadcast [color, permissions, displaytag]");
        						player.sendMessage(ChatColor.GREEN + "/edit channels [channel] [chatcolor, mutable, permissions, alias, default, autojoin, distance, cooldown, bungeecord, format, create , delete]");
        						player.sendMessage(ChatColor.GREEN + "/edit help");
        						break;
        					}
        					default: {
        						player.sendMessage(ChatColor.RED + "Invalid arguments, /edit help");
        						break;
        					}
        				}
        			}
        			catch(Exception e) {
        				player.sendMessage(ChatColor.RED + "Invalid arguments, /edit help");
        			}       			
        			return true;
        		}
        	}       	
        }
        return false;
	}
}
