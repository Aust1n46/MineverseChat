package mineverse.Aust1n46.chat.listeners;

import java.io.DataOutputStream;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import net.minecraft.util.org.apache.commons.io.output.ByteArrayOutputStream;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.plugin.PluginManager;
import org.kitteh.vanish.staticaccess.VanishNoPacket;
import com.massivecraft.factions.entity.UPlayer;
import com.palmergames.bukkit.towny.object.Resident;
import com.palmergames.bukkit.towny.object.TownyUniverse;
import java.util.Calendar;
import java.util.IllegalFormatException;
import java.util.List;
import java.util.StringTokenizer;
import mineverse.Aust1n46.chat.ChatChannel;
import mineverse.Aust1n46.chat.ChatChannelInfo;
import mineverse.Aust1n46.chat.MineverseChat;

@SuppressWarnings("deprecation")
public class ChatListener implements Listener {
    MineverseChat plugin;
    List<String> filters;
    ChatChannelInfo cc;
    
    @SuppressWarnings("unchecked")
	public ChatListener(MineverseChat _plugin) {
        plugin = _plugin;
        filters = (List<String>) plugin.getConfig().getList("filters");
    }
    
    @SuppressWarnings("unchecked")
    public ChatListener(MineverseChat _plugin, ChatChannelInfo _cc) {
        plugin = _plugin;
        cc = _cc;
        filters = (List<String>) plugin.getConfig().getList("filters");
    }
    
    @EventHandler(priority = EventPriority.MONITOR) 
    public void onPlayerMove(PlayerMoveEvent event) {
    	Player p = event.getPlayer();
    	if(plugin.getMetadata(p, "MineverseChat.afk", plugin)) {
    		p.setMetadata("MineverseChat.afk", new FixedMetadataValue(plugin,false));
        	p.sendMessage(ChatColor.GOLD + "You are no longer AFK.");
        	Player pla[] = plugin.getServer().getOnlinePlayers();
        	if(plugin.getConfig().getBoolean("broadcastafk")) {
        		for (Player player : pla) {
        			if(p.getDisplayName() != player.getDisplayName()) {
        				player.sendMessage(ChatColor.GOLD + p.getDisplayName() + " is no longer AFK.");
        			}
        		}
        	}
    	}
    }
    
    @EventHandler(priority = EventPriority.LOW) 
    public void onAsyncPlayerChatEvent(AsyncPlayerChatEvent event) {
    	boolean bungee=false;
        String evMessage;
        if (event.isCancelled()) {
            return;
        }
        
        Player p = event.getPlayer();
        if(plugin.getMetadata(p, "MineverseChat.afk", plugin)) {
        	p.setMetadata("MineverseChat.afk", new FixedMetadataValue(plugin,false));
        	p.sendMessage(ChatColor.GOLD + "You are no longer AFK.");
        	Player pla[] = plugin.getServer().getOnlinePlayers();
        	if(plugin.getConfig().getBoolean("broadcastafk")) {
        		for (Player player : pla) {
        			if(p.getDisplayName() != player.getDisplayName()) {
        				player.sendMessage(ChatColor.GOLD + p.getDisplayName() + " is no longer AFK.");
        			}
        		}
        	}
        }		
        String tellPlayer = plugin.getMetadataString(p, "MineverseChat.tell", plugin);
        if(tellPlayer.length() > 0 && !plugin.getMetadata(p, "MineverseChat.quickchat", plugin)) {          
            Player tp = plugin.getServer().getPlayer(tellPlayer);
            if(tp == null) {
                p.sendMessage(ChatColor.RED + tellPlayer + " is not available.");
                Player pl[] = plugin.getServer().getOnlinePlayers();
				for(Player sp : pl) {
					if(plugin.getMetadata(sp,"MineverseChat.spy", plugin) == true) {         					
						sp.sendMessage(p.getDisplayName() + " is no longer in a private conversation with " + tellPlayer + ".");
					}							
				}
                p.setMetadata("MineverseChat.tell", new FixedMetadataValue(plugin, ""));
            } 
            else {
                String playerignorelist = plugin.getMetadataString(tp, "MineverseChat.ignore", plugin);
                if(playerignorelist.length() > 0) {
                    String curplayer = "";
                    StringTokenizer st = new StringTokenizer(playerignorelist, ",");
                    while(st.hasMoreTokens()) {
                        curplayer = st.nextToken();
                        if (curplayer.equalsIgnoreCase(p.getName())) {
                            p.sendMessage(ChatColor.GOLD + tellPlayer + " is currently ignoring your tells.");
                            event.setCancelled(true);
                            return;
                        }
                    }
                }              
                String filtered = event.getMessage();
                String echo = "";
                String send = "";
                String spy = "";
				if(plugin.getMetadata(p, "MineverseChat.filter", plugin)) {
					filtered = cc.FilterChat(event.getMessage());
				}
				if(p.isPermissionSet("mineversechat.color")) {
					filtered = cc.FormatStringColor(filtered);
	            }
				if(p.isPermissionSet("mineversechat.format")) {
					filtered = cc.FormatString(filtered);
	            }
				filtered = " " + filtered;
				if(plugin.getConfig().getString("tellformatto").equalsIgnoreCase("Default")) {
					echo = "You message " + tp.getDisplayName() + ":" + ChatColor.valueOf(cc.tellColor.toUpperCase()) + filtered;	
				}
				else {
					echo = cc.FormatStringAll(plugin.getConfig().getString("tellformatto").replace("{playerto}", tp.getName()).replace("{playerfrom}", p.getName())) + filtered;
				}
				if(plugin.getConfig().getString("tellformatfrom").equalsIgnoreCase("Default")) {
					send = p.getDisplayName() + " messages you:"+ ChatColor.valueOf(cc.tellColor.toUpperCase()) + filtered;
				}
				else {
					send = cc.FormatStringAll(plugin.getConfig().getString("tellformatfrom").replace("{playerto}", tp.getName()).replace("{playerfrom}", p.getName())) + filtered;
				}
				if(plugin.getConfig().getString("tellformatspy").equalsIgnoreCase("Default")) {
					spy = p.getDisplayName() + " messages " + tp.getDisplayName() + ":" + ChatColor.valueOf(cc.tellColor.toUpperCase()) + filtered;    							
				}
				else {
					spy = cc.FormatStringAll(plugin.getConfig().getString("tellformatspy").replace("{playerto}", tp.getName()).replace("{playerfrom}", p.getName())) + filtered;
				}   		
                Player spl[] = plugin.getServer().getOnlinePlayers();
                for(Player sp : spl) {
        			if(plugin.getMetadata(sp,"MineverseChat.spy", plugin)) {         					
        				sp.sendMessage(spy);
        			}
        		}                
                tp.sendMessage(send);
                p.sendMessage(echo); 
                p.setMetadata("MineverseChat.reply", new FixedMetadataValue(plugin,tp.getName()));
                tp.setMetadata("MineverseChat.reply", new FixedMetadataValue(plugin,p.getName()));
            }
            event.setCancelled(true);
            return;
        }
        
        if(plugin.getMetadata(p, "MineverseChat.party.chat", plugin) && !plugin.getMetadata(p, "MineverseChat.quickchat", plugin)) {
        	if(!plugin.getMetadataString(p, "MineverseChat.party", plugin).equals("")) {
        		for(Player party : Bukkit.getOnlinePlayers()) {
        			if(plugin.getMetadataString(party, "MineverseChat.party", plugin).equals(plugin.getMetadataString(p, "MineverseChat.party", plugin)) || plugin.getMetadata(party,"MineverseChat.spy", plugin)) {
        				String filtered = event.getMessage();
        				String partyformat = "";
        				if(plugin.getMetadata(p, "MineverseChat.filter", plugin)) {
        					filtered = cc.FilterChat(event.getMessage());
        				}
        				if(p.isPermissionSet("mineversechat.color")) {
 		                    filtered = cc.FormatStringColor(filtered);
						}
        				if(p.isPermissionSet("mineversechat.format")) {
 		                    filtered = cc.FormatString(filtered);
        				}
        				filtered = " " + filtered;
        				if(plugin.getConfig().getString("partyformat").equalsIgnoreCase("Default")) {
        					partyformat = ChatColor.GREEN + "[" + plugin.getMetadataString(p, "MineverseChat.party", plugin) + "'s Party] " +p.getName() + ":" + filtered;
        				}
        				else {
        					partyformat = cc.FormatStringAll(plugin.getConfig().getString("partyformat").replace("{host}", plugin.getMetadataString(p, "MineverseChat.party", plugin)).replace("{player}", p.getName())) + filtered;
        				}
        				party.sendMessage(partyformat);
        			}
        		}
        		event.setCancelled(true);
        		return;
        	}
        	p.sendMessage(ChatColor.RED + "You are not in a party.");
        	event.setCancelled(true);
    		return;
        }       
        
        Player fpl[] = plugin.getServer().getOnlinePlayers();
        if(event.getMessage().startsWith("@")) {
        	for(Player fp : fpl) {
        		if(event.getMessage().startsWith("@" + fp.getDisplayName())) {
        			String format = event.getMessage().substring(fp.getDisplayName().length() + 1);            			
        			if(event.getMessage().length() <= fp.getDisplayName().length() + 1) {
        				p.sendMessage(ChatColor.RED + "You must include a message.");
        				event.setCancelled(true);
        				return;
        			}			 
        			PluginManager pluginManager = plugin.getServer().getPluginManager();
        			if(pluginManager.isPluginEnabled("VanishNoPacket")) {
        				try {
        					if(VanishNoPacket.isVanished(fp.getName())) {			       										    				
        						break;			 
        					}
        				} 
        				catch(Exception e) {					
        					e.printStackTrace();
        				}
        			}
        			String playerignorelist = plugin.getMetadataString(fp, "MineverseChat.ignore", plugin);
        			if(playerignorelist.length() > 0) {
        				String curplayer = "";
        				StringTokenizer st = new StringTokenizer(playerignorelist, ",");
        				while(st.hasMoreTokens()) {
        					curplayer = st.nextToken();
        					if(curplayer.equalsIgnoreCase(event.getPlayer().getName())) {
        						event.getPlayer().sendMessage(ChatColor.GOLD + fp.getDisplayName() + " is currently ignoring your tells.");
        						event.setCancelled(true);
        						return;
        					}
        				}
        			}
        			String echo = "";
        			String send = "";
        			String spy = "";
        			if(plugin.getMetadata(fp, "MineverseChat.afk", plugin) == true) {
        				p.sendMessage(ChatColor.GOLD + fp.getDisplayName() + " is currently afk and might be unable to chat at this time.");
        			}
        			if(plugin.getMetadata(p, "MineverseChat.filter", plugin)) {
						format = cc.FilterChat(format);
    				}
        			if(p.hasPermission("mineversechat.color")) {
						format = cc.FormatStringColor(format);
		            }
        			if(p.hasPermission("mineversechat.format")) {
						format = cc.FormatString(format);
		            }
        			if(plugin.getConfig().getString("tellformatto").equalsIgnoreCase("Default")) {
    					echo = "You message " + fp.getDisplayName() + ":" + ChatColor.valueOf(cc.tellColor.toUpperCase()) + format;	
    				}
    				else {
    					echo = cc.FormatStringAll(plugin.getConfig().getString("tellformatto").replace("{playerto}", fp.getName()).replace("{playerfrom}", p.getName())) + format;
    				}
    				if(plugin.getConfig().getString("tellformatfrom").equalsIgnoreCase("Default")) {
    					send = p.getDisplayName() + " messages you:"+ ChatColor.valueOf(cc.tellColor.toUpperCase()) + format;
    				}
    				else {
    					send = cc.FormatStringAll(plugin.getConfig().getString("tellformatfrom").replace("{playerto}", fp.getName()).replace("{playerfrom}", p.getName())) + format;
    				}
    				if(plugin.getConfig().getString("tellformatspy").equalsIgnoreCase("Default")) {
    					spy = p.getDisplayName() + " messages " + fp.getDisplayName() + ":" + ChatColor.valueOf(cc.tellColor.toUpperCase()) + format;    							
    				}
    				else {
    					spy = cc.FormatStringAll(plugin.getConfig().getString("tellformatspy").replace("{playerto}", fp.getName()).replace("{playerfrom}", p.getName())) + format;
    				}   	    				
                    for(Player sp : fpl) {
            			if(plugin.getMetadata(sp,"MineverseChat.spy", plugin)) {         					
            				sp.sendMessage(spy);
            			}
            		}                    
        			fp.sendMessage(send);
        			p.sendMessage(echo);			
        			fp.setMetadata("MineverseChat.reply", new FixedMetadataValue(plugin,event.getPlayer().getName()));
					p.setMetadata("MineverseChat.reply", new FixedMetadataValue(plugin,fp.getName()));
        			event.setCancelled(true);
        			return;		
        		}
        	}
		}
                  
        evMessage = event.getMessage();
        Location locreceip;
        Location locsender = p.getLocation();
        Location diff;
        Boolean filterthis = true;
        String curChannel = "";

        String insertchannel = plugin.getMetadataString(p, "insertchannel", plugin);
        
        if(!p.hasMetadata("insertchannel")) {
            insertchannel = "NONE";
        }

        if(insertchannel.equalsIgnoreCase("NONE")) {
        	curChannel = plugin.getMetadataString(p, "currentchannel", plugin);
        } 
        else {        	
            curChannel = insertchannel;
            p.setMetadata("insertchannel", new FixedMetadataValue(plugin, "NONE"));
        }

        if(curChannel.length() == 0) {          
            p.setMetadata("currentchannel", new FixedMetadataValue(plugin, cc.defaultChannel));
        }       
        
        String listenChannel = "listenchannel." + curChannel; 
        if(plugin.getMetadata(p, "MineverseMute." + curChannel, plugin)) {
        	for(ChatChannel ci : cc.getChannelsInfo()) {
        		if(curChannel.equalsIgnoreCase(ci.getName())) {
        			p.sendMessage(ChatColor.RED + "You are muted in this channel: " + ChatColor.valueOf(ci.getColor().toUpperCase()) + curChannel);
        			p.setMetadata("MineverseChat.quickchat", new FixedMetadataValue(plugin, false));
        			event.setCancelled(true);
        			return;
        		}
        	}
        } 
        else {       	
            p.setMetadata(listenChannel, new FixedMetadataValue(plugin, true));
        }    
        
        Double chDistance = (double) 0;
        int chCooldown = 0;
        String curColor = "";
        String Channelformat;
        Channelformat = plugin.getMetadataString(p, "format", plugin);
        String Bungeeformat;
        Bungeeformat = plugin.getMetadataString(p, "bungeeformat", plugin);
  
        for(ChatChannel ci : cc.getChannelsInfo()) {
            if(curChannel.equalsIgnoreCase(ci.getName())) {
				if(ci.hasPermission()) {
                    if(plugin.getMetadata(p, ci.getPermission(), plugin) == false) {
                        p.sendMessage(ChatColor.RED + "You do not have permission for this channel.");
                        p.setMetadata("MineverseChat.quickchat", new FixedMetadataValue(plugin, false));
                        event.setCancelled(true);
                        return;
                    }
                }       
				curColor = ci.getChatColor().toUpperCase();
                bungee=ci.getBungee();
                if(ci.isCooldown()) {
                	chCooldown = ci.getCooldown();
                }
                
                try {
                	Calendar currentDate = Calendar.getInstance();
                	SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
                	String date = formatter.format(currentDate.getTime());
                	String[] datearray = date.split(":");             
                	int time = (Integer.parseInt(datearray[0])*3600) + (Integer.parseInt(datearray[1])*60) + (Integer.parseInt(datearray[2]));               	
                	if(p.hasMetadata("MineverseChat.cooldown."+curChannel)) {
                		int timemark = Integer.parseInt(plugin.getMetadataString(p,"MineverseChat.cooldown."+curChannel,plugin));
                		if(time < timemark + chCooldown) {
                			int remaining = timemark+chCooldown-time;
                			String keyword="seconds";
                			if(remaining==1) keyword="second";
                			p.sendMessage(ChatColor.RED+""+remaining+" "+keyword+" of cooldown remaining.");
                			p.setMetadata("MineverseChat.quickchat", new FixedMetadataValue(plugin, false));
                			event.setCancelled(true);
                			bungee=false;
                		}
                	}              
                	if(ci.isCooldown() && !event.isCancelled()) {
                		if(!p.hasPermission("mineversechat.cooldown.bypass")) {
                			p.setMetadata("MineverseChat.cooldown."+curChannel,new FixedMetadataValue(plugin,time));
                		}
                	}
                	if(p.hasMetadata("MineverseChat.spam."+curChannel) && p.hasMetadata("MineverseChat.spamcount." + curChannel) && plugin.getConfig().getConfigurationSection("antispam").getBoolean("enabled") && !p.hasPermission("mineversechat.spam.bypass")) {
                		int spamcount = Integer.parseInt(plugin.getMetadataString(p, "MineverseChat.spamcount." + curChannel, plugin));
                		int spamtime = Integer.parseInt(plugin.getMetadataString(p, "MineverseChat.spam."+curChannel, plugin));
                		if(time <  spamtime + plugin.getConfig().getConfigurationSection("antispam").getInt("spamtime")) {
                			if(spamcount + 1 >= plugin.getConfig().getConfigurationSection("antispam").getInt("spamnumber")) {
                				p.setMetadata("MineverseMute."+curChannel, new FixedMetadataValue(plugin,true));
                				p.setMetadata("MineverseChat.spamcount." + curChannel, new FixedMetadataValue(plugin, 0));
                				p.sendMessage(ChatColor.RED + "You have been muted for spamming in: " + ChatColor.valueOf(ci.getColor().toUpperCase()) + ci.getName());
                				p.setMetadata("MineverseChat.quickchat", new FixedMetadataValue(plugin, false));
                				event.setCancelled(true);
                			}
                			else {
                				p.setMetadata("MineverseChat.spamcount." + curChannel, new FixedMetadataValue(plugin, spamcount + 1));
                			}
                		}
                		else {
                			p.setMetadata("MineverseChat.spamcount." + curChannel, new FixedMetadataValue(plugin, 0));
                			p.setMetadata("MineverseChat.spam." + curChannel, new FixedMetadataValue(plugin, time));
                		}
                	}
                	else {
                		p.setMetadata("MineverseChat.spamcount." + curChannel, new FixedMetadataValue(plugin, 1));
                		p.setMetadata("MineverseChat.spam." + curChannel, new FixedMetadataValue(plugin, time));
                	}
                }           
                catch(NumberFormatException e) {
                	e.printStackTrace();
                }
                
                if(ci.isDistance()) {
                    chDistance = ci.getDistance();
                }                                            
                            	             
                if(insertchannel.equalsIgnoreCase("NONE") || insertchannel.length() == 0) {              	      	
                	PluginManager pluginManager = plugin.getServer().getPluginManager();
                	String town = "";
        			String nation = "";
        			String ttitle = "";
        			String ftitle = "";
        			String faction = "";
        			String ptown = "";
        			String pnation = "";
        			String prefix = cc.FormatStringAll(MineverseChat.chat.getPlayerPrefix(p));
        			String suffix = cc.FormatStringAll(MineverseChat.chat.getPlayerSuffix(p));
        			String group = MineverseChat.chat.getPrimaryGroup(p);   
        			String groupprefix = cc.FormatStringAll(MineverseChat.chat.getGroupPrefix(p.getWorld(), group));
        			String groupsuffix = cc.FormatStringAll(MineverseChat.chat.getGroupSuffix(p.getWorld(), group));
                	if(pluginManager.isPluginEnabled("Towny")) {
                		try {
    						Resident r = TownyUniverse.getDataSource().getResident(p.getName());
    						if(r.hasTown()) {
    							town = r.getTown().getName();
    							ptown = ChatColor.WHITE + "[" + ChatColor.DARK_AQUA + r.getTown().getName() + ChatColor.WHITE + "]";
    						}
    						if(r.hasNation()) {
    							nation = r.getTown().getNation().getName();
    							pnation = ChatColor.WHITE + "[" + ChatColor.GOLD + r.getTown().getNation().getName() + ChatColor.WHITE + "]";
    						}	
    						if(r.isMayor() || r.isKing()) {
    							ttitle = r.getFormattedName().replace(" " + p.getName(), "");    							
    						}
    						else {
    							ttitle = r.getTitle();    							
    						}
    					} 
            			catch(Exception ex) {
    						ex.printStackTrace();
    					}  
                	}  
                	if(pluginManager.isPluginEnabled("Factions")) {
                		try {
                			UPlayer uplayer = UPlayer.get(p);
                			if(uplayer.hasFaction()) {               				
                				faction = uplayer.getFaction().getName();   
                			}
                			if(uplayer.hasTitle()) {               				
                				ftitle = uplayer.getTitle();
                			}
    					} 
            			catch(Exception ex) {
    						ex.printStackTrace();
    					}  
                	}  
                	if(plugin.getConfig().getConfigurationSection("channels." + curChannel).getString("format").equalsIgnoreCase("Default")) {
                		Channelformat = ChatColor.valueOf(ci.getColor().toUpperCase()) + "[" + curChannel + "] " + prefix + "%s" + ChatColor.valueOf(ci.getColor().toUpperCase()) + ":" + ChatColor.valueOf(ci.getChatColor().toUpperCase());
                		Bungeeformat = ChatColor.valueOf(ci.getColor().toUpperCase()) + p.getServer().getServerName() + " [" + curChannel + "] " + prefix + p.getName() + ChatColor.valueOf(ci.getColor().toUpperCase()) + ":" + ChatColor.valueOf(ci.getChatColor().toUpperCase());
                	}
                	else {
                		Channelformat = cc.FormatStringAll(plugin.getConfig().getConfigurationSection("channels." + curChannel).getString("format").replace("{town}", town).replace("{nation}", nation).replace("{name}", "%s").replace("{townytitle}", ttitle).replace("{prefix}", prefix).replace("{suffix}", suffix).replace("{faction}", faction).replace("{factionstitle}", ftitle).replace("{servername}", p.getServer().getServerName()).replace("{pretown}", ptown).replace("{prenation}", pnation).replace("{group}", group).replace("{groupprefix}", groupprefix).replace("{groupsuffix}", groupsuffix));
                		Bungeeformat = cc.FormatStringAll(plugin.getConfig().getConfigurationSection("channels." + curChannel).getString("format").replace("{town}", town).replace("{nation}", nation).replace("{name}", p.getName()).replace("{townytitle}", ttitle).replace("{prefix}", prefix).replace("{suffix}", suffix).replace("{faction}", faction).replace("{factionstitle}", ftitle).replace("{servername}", p.getServer().getServerName()).replace("{pretown}", ptown).replace("{prenation}", pnation).replace("{group}", group).replace("{groupprefix}", groupprefix).replace("{groupsuffix}", groupsuffix));            	
                		if(plugin.getConfig().getBoolean("formatcleaner", false)) {
                			Channelformat = Channelformat.replace("[]", " ");
                			Bungeeformat = Bungeeformat.replace("[]", " ");
                			Channelformat = Channelformat.replace("    ", " ").replace("   ", " ").replace("  ", " ");             			
                			Bungeeformat = Bungeeformat.replace("    ", " ").replace("   ", " ").replace("  ", " ");
                		}
                	}
                }
                filterthis = ci.isFiltered();
            }        
        }

        if(filterthis) {
        	if(plugin.getMetadata(p, "MineverseChat.filter", plugin)) {  
            	evMessage = cc.FilterChat(evMessage);
            }
        }     

        Player[] pl = event.getRecipients().toArray(new Player[0]);
        PluginManager pluginManager = plugin.getServer().getPluginManager();
        for(Player rp : pl) {
        	if(rp != p) {
        		if(!(rp.hasMetadata(listenChannel))) {
        			event.getRecipients().remove(rp);
        		} 
        		else {
        			if(!plugin.getMetadata(rp, listenChannel, plugin)) {
        				event.getRecipients().remove(rp);
        			}
        		}
            
        		if(pluginManager.isPluginEnabled("Towny")) {
        			try {       		
        				Resident r = TownyUniverse.getDataSource().getResident(rp.getName());
        				Resident pp = TownyUniverse.getDataSource().getResident(p.getName());    
        				if(curChannel.equalsIgnoreCase("Town")) {      					       				
            				if(!pp.hasTown()) {
            					event.getRecipients().remove(rp);
            				}
            				else if(!r.hasTown()) {
        						event.getRecipients().remove(rp);
        					}
        					else if(!(r.getTown().getName().equals(pp.getTown().getName()))) {
        						event.getRecipients().remove(rp);
        					}      					
        				}
        				if(curChannel.equalsIgnoreCase("Nation")) {      					       				
            				if(!pp.hasNation()) {
            					event.getRecipients().remove(rp);
            				}
            				else if(!r.hasNation()) {
        						event.getRecipients().remove(rp);
        					}
        					else if(!(r.getTown().getNation().getName().equals(pp.getTown().getNation().getName()))) {
        						event.getRecipients().remove(rp);
        					}      					
        				}
        			} 
        			catch(Exception ex) {
						ex.printStackTrace();
					}              	
        		}
            
        		if(chDistance > (double) 0 && !bungee) {
        			locreceip = rp.getLocation();
        			if(locreceip.getWorld() == p.getWorld()) {
        				diff = locreceip.subtract(locsender);                   
        				if(Math.abs(diff.getX()) > chDistance || Math.abs(diff.getZ()) > chDistance) {                    
        					event.getRecipients().remove(rp);
        				}
        			} 
        			else { 
        				event.getRecipients().remove(rp);
        			}
        		}
            }
        }
        if(event.getRecipients().size() == 1 && !bungee && !event.isCancelled()) {
            p.sendMessage(ChatColor.GOLD + "No one is listening to you.");
        }       
            
        try {
            if(p.hasPermission("mineversechat.color")) {
            	evMessage = cc.FormatStringColor(evMessage);
            }
            if(p.hasPermission("mineversechat.format")) {
            	evMessage = cc.FormatString(evMessage);
            }                                
            if(!plugin.getMetadata(p, "MineverseChat.quickchat", plugin) || !p.hasMetadata("MineverseChat.quickchat")) {
            	event.setMessage(ChatColor.valueOf(curColor) + " " + evMessage);
            }
            else {
            	event.setMessage(ChatColor.valueOf(curColor) + evMessage);
            }
            p.setMetadata("MineverseChat.quickchat", new FixedMetadataValue(plugin, false));
            event.setFormat(Channelformat + "%s");
            if(bungee) {                   
            	event.setFormat(Bungeeformat.replace(p.getName(), "%s") + "%s");
                ByteArrayOutputStream byteOutStream=new ByteArrayOutputStream();
            	DataOutputStream out=new DataOutputStream(byteOutStream);
                try {         
                	out.writeUTF("Forward");
                	out.writeUTF("ALL");
                	out.writeUTF("Chat");
                	ByteArrayOutputStream msgbytes = new ByteArrayOutputStream();
                	DataOutputStream msgout = new DataOutputStream(msgbytes);
                	msgout.writeUTF(Bungeeformat + evMessage+"\n"+curChannel);
                	msgout.writeShort(123);
                	out.writeShort(msgbytes.toByteArray().length);
                	out.write(msgbytes.toByteArray());
                	p.sendPluginMessage(plugin,"BungeeCord",byteOutStream.toByteArray());                	 
                	msgout.close();
                	out.close();
                }
                catch(Exception e) {
                	e.printStackTrace();
                }
            }            
        } 
        catch(IllegalFormatException ex) {
            plugin.getLogger().log(Level.INFO, "Message Format issue: {0}:{1}", new Object[]{ex.getMessage(), evMessage});
            event.setMessage(Channelformat + evMessage);
        }
    } 
    
    public HandlerList getHandlers() {
        return null;
    }
}
