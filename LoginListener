package mineverse.Aust1n46.chat.listeners;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import mineverse.Aust1n46.chat.ChatChannel;
import mineverse.Aust1n46.chat.ChatChannelInfo;
import mineverse.Aust1n46.chat.MineverseChat;
import org.bukkit.ChatColor;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerLoginEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.metadata.FixedMetadataValue;

public class LoginListener implements Listener {
    MineverseChat plugin;
    ChatChannelInfo cc;
    String defaultChannel;
    String defaultColor;
    FileConfiguration customConfig = null;
    File customConfigFile = null;

    public void SaveItToDisk() {
        try {
            customConfig.save(customConfigFile);
        } 
        catch (IOException e) {
            plugin.getLogger().log(Level.SEVERE, "Could not save config to " + customConfigFile, e);
            e.printStackTrace();
        }
    }

    public LoginListener(MineverseChat _plugin, ChatChannelInfo _cc) {
        plugin = _plugin;
        cc = _cc;
        for(ChatChannel c : cc.getChannelsInfo()) {
            if(c.isDefaultchannel()) {
                defaultChannel = c.getName();
                defaultColor = c.getColor();
            }
        }
        reloadCustomConfig();
    }

    @EventHandler(priority = EventPriority.LOW) 
    void onPlayerKick(PlayerKickEvent plog) {
        if(cc.saveplayerdata) {
            PlayerLeaving(plog.getPlayer());
        }
    }

    @EventHandler(priority = EventPriority.LOW)
    void onPlayerQuit(PlayerQuitEvent plog) {
        if(cc.saveplayerdata) {
            PlayerLeaving(plog.getPlayer());
        }
    }

    @SuppressWarnings("unchecked")
	void PlayerLeaving(Player pp) {   	
        customConfig = getCustomConfig();
        Player pl = pp;
        ConfigurationSection cs = customConfig.getConfigurationSection("players." + pl.getPlayerListName());
        if(cs == null) {
        Boolean nothingspecial = true;
        for(ChatChannel c : cc.getChannelsInfo()) {  
        	if(plugin.getMetadata(pl, "listenchannel." + c.getName(), plugin)) {
                if(!c.isDefaultchannel() && !c.getAutojoin()) {
                    nothingspecial = false;
                }       
            } 
            if(plugin.getMetadata(pl, "MineverseMute." + c.getName(), plugin)) {               
            	nothingspecial = false;
            }    
            if(!nothingspecial) break;
        }
        
        for(String cb:(List<String>)plugin.getConfig().getList("blockablecommands")) {
			if(plugin.getMetadata(pl,"MineverseChat.commandblock./"+cb,plugin)) {
				nothingspecial = false;
			}
			if(!nothingspecial) break;
		}
        
        if(!plugin.getMetadataString(pl, "MineverseChat.ignore", plugin).isEmpty()) {
            nothingspecial = false;
        }
       
        if(nothingspecial) {           
            return;
        }

        ConfigurationSection ps = customConfig.getConfigurationSection("players");
        	if(ps == null) {
                cs = customConfig.createSection("players");
            }
            cs = customConfig.createSection("players." + pl.getPlayerListName());

        }
        cs.set("default", plugin.getMetadataString(pl, "currentchannel", plugin));
        cs.set("ignores", plugin.getMetadataString(pl, "MineverseChat.ignore", plugin));
        String strListening = "";
        String strMutes = "";
        for(ChatChannel c : cc.getChannelsInfo()) {
            if(plugin.getMetadata(pl, "listenchannel." + c.getName(), plugin)) {
                strListening += c.getName() + ",";
            }
            if(plugin.getMetadata(pl, "MineverseMute." + c.getName(), plugin)) {            	
                strMutes += c.getName() + ",";
            }
        }    
        String blockedCommands="";      
        for(String cb:(List<String>)plugin.getConfig().getList("blockablecommands")) {
			if(plugin.getMetadata(pl,"MineverseChat.commandblock./"+cb,plugin)) {
				blockedCommands += cb + ",";
			}
		}
        if(strListening.length() > 0) {
            strListening = strListening.substring(0, strListening.length() - 1);
        }
        cs.set("listen", strListening);
        if(strMutes.length() > 0) {
            strMutes = strMutes.substring(0, strMutes.length() - 1);
        }
        cs.set("mutes", strMutes); 
        if(blockedCommands.length() > 0) {
        	blockedCommands = blockedCommands.substring(0,blockedCommands.length()-1);
        }
        cs.set("blockedcommands",blockedCommands);

        Calendar currentDate = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss");
        String dateNow = formatter.format(currentDate.getTime());      
        cs.set("date", dateNow);
    }

    @EventHandler(priority = EventPriority.LOW) 
    void onPlayerLogin(PlayerLoginEvent plog) {
        String curChannel;
        String pFormatted = "";
        Player pl = plog.getPlayer();
        pl.setMetadata("MineverseChat.filter", new FixedMetadataValue(plugin,true));  	 
        pFormatted = cc.FormatPlayerName(MineverseChat.chat.getPlayerPrefix(pl), "%s", MineverseChat.chat.getPlayerSuffix(pl));
        pl.setMetadata("chatnameformat", new FixedMetadataValue(plugin, pFormatted));
  
        for(ChatChannel c : cc.getChannelsInfo()) {
            if(c.hasPermission()) {            
                if(pl.isPermissionSet(c.getPermission())) {                  
                    pl.setMetadata(c.getPermission(), new FixedMetadataValue(plugin, true));
                }
                else {
                    pl.setMetadata(c.getPermission(), new FixedMetadataValue(plugin, false));
                }
            }
        }
                     
        if(cc.saveplayerdata) {
            customConfig = getCustomConfig();        
            ConfigurationSection cs = customConfig.getConfigurationSection("players." + pl.getPlayerListName());
            if(cs != null) {              
                curChannel = cs.getString("default", defaultChannel);
                pl.setMetadata("currentchannel", new FixedMetadataValue(plugin, curChannel));
                String ignores = cs.getString("ignores", "");
                pl.setMetadata("MineverseChat.ignore", new FixedMetadataValue(plugin, ignores));              
                String listenChannels = cs.getString("listen", "");              
                if(listenChannels.length() > 0) {
                    StringTokenizer st = new StringTokenizer(listenChannels, ",");
                    while (st.hasMoreTokens()) {
                        String chname = st.nextToken();
                        ChatChannel c = cc.getChannelInfo(chname);                                            
                        if(c.hasPermission()) {                          
                            if(pl.isPermissionSet(c.getPermission())) {
                                pl.setMetadata("listenchannel." + chname, new FixedMetadataValue(plugin, true));
                            }
                        } 
                        else {
                            pl.setMetadata("listenchannel." + chname, new FixedMetadataValue(plugin, true));
                        }
                    }
                }                
                String muteChannels = cs.getString("mutes", "");
                if(muteChannels.length() > 0) {
                    StringTokenizer st = new StringTokenizer(muteChannels, ",");
                    while(st.hasMoreTokens()) {
                        pl.setMetadata("MineverseMute." + st.nextToken(), new FixedMetadataValue(plugin, true));
                    }
                }             
                String blockedCommands = cs.getString("blockedcommands","");
                if(blockedCommands.length() > 0) {
                	StringTokenizer st = new StringTokenizer(blockedCommands, ",");
                	while(st.hasMoreTokens()) {
                		pl.setMetadata("MineverseChat.commandblock./"+st.nextToken(),new FixedMetadataValue(plugin,true));
                	}
                }
            } 
            else {               
                curChannel = defaultChannel;
                pl.setMetadata("currentchannel", new FixedMetadataValue(plugin, defaultChannel));
                pl.setMetadata("listenchannel." + defaultChannel, new FixedMetadataValue(plugin, true));
            }
        } 
        else {
            curChannel = defaultChannel;
            pl.setMetadata("currentchannel", new FixedMetadataValue(plugin, defaultChannel));
            pl.setMetadata("listenchannel." + defaultChannel, new FixedMetadataValue(plugin, true));
        }           
        pl.setMetadata("insertchannel", new FixedMetadataValue(plugin, "NONE"));
        
        List<String> autolist = cc.getAutojoinList();
        if(autolist.size() > 0) {
            for(String s : autolist) {         	
            	ChatChannel c = cc.getChannelInfo(s);           	 
                if(c.hasPermission()) {                  
                    if(pl.isPermissionSet(c.getPermission())) {
                        pl.setMetadata("listenchannel." + s, new FixedMetadataValue(plugin, true));
                    }
                } 
                else {
                    pl.setMetadata("listenchannel." + s, new FixedMetadataValue(plugin, true));
                }
            }                       	
        }
        
        String curColor = defaultColor;
        ChatChannel cf = cc.getChannelInfo(curChannel);
        curColor = cf.getColor();
        String format = ChatColor.valueOf(curColor.toUpperCase()) + "[" + curChannel + "]";
        pl.setMetadata("format", new FixedMetadataValue(plugin, format));          
    }

    public void reloadCustomConfig() {       
        if(customConfigFile == null) {
            customConfigFile = new File(plugin.getDataFolder().getAbsolutePath(), "PlayerData.yml");
        }
        customConfig = YamlConfiguration.loadConfiguration(customConfigFile);
    }

    public FileConfiguration getCustomConfig() {
        if(customConfig == null) {
            this.reloadCustomConfig();
        }
        return customConfig;
    }

    public void saveCustomConfig() {
        if(customConfig == null || customConfigFile == null) {
            return;
        }
        try {
            getCustomConfig().save(customConfigFile);
        } 
        catch (IOException ex) {
            plugin.getLogger().log(Level.SEVERE, "Could not save config to " + customConfigFile, ex);
        }
    }
}
